<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lsh::blog (Posts about java)</title><link>https://lyubomyr-shaydariv.github.io/</link><description></description><atom:link href="https://lyubomyr-shaydariv.github.io/categories/java.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:"&gt;Lyubomyr Shaydariv&lt;/a&gt; </copyright><lastBuildDate>Mon, 19 Apr 2021 08:21:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>foreach is an MVP pattern implementation</title><link>https://lyubomyr-shaydariv.github.io/posts/2018-07-25-foreach-is-an-mvp-pattern-implementation/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt;, enhanced &lt;code&gt;for&lt;/code&gt; statement, is a perfect example of an &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter"&gt;MVP&lt;/a&gt; pattern implementation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2018-07-25-foreach-is-an-mvp-pattern-implementation/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://lyubomyr-shaydariv.github.io/posts/2018-07-25-foreach-is-an-mvp-pattern-implementation/</guid><pubDate>Wed, 25 Jul 2018 11:16:00 GMT</pubDate></item><item><title>The Java language seems to go a wrong way</title><link>https://lyubomyr-shaydariv.github.io/posts/2018-05-14-the-java-language-seems-to-go-a-wrong-way/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm not sure if the Java language goes a right way.
The new Java language features look really not I would like to have in Java.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2018-05-14-the-java-language-seems-to-go-a-wrong-way/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://lyubomyr-shaydariv.github.io/posts/2018-05-14-the-java-language-seems-to-go-a-wrong-way/</guid><pubDate>Mon, 14 May 2018 06:00:00 GMT</pubDate></item><item><title>Optional&lt;T&gt; tends to be used in a wrong way</title><link>https://lyubomyr-shaydariv.github.io/posts/2017-01-26-optional-tends-to-be-used-in-a-wrong-way/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;Want to explicitly declare a nullability contract?
You probably might want to use &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;, but it does not seem to be the best way.
I've got some cons against it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2017-01-26-optional-tends-to-be-used-in-a-wrong-way/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>java-8</category><guid>https://lyubomyr-shaydariv.github.io/posts/2017-01-26-optional-tends-to-be-used-in-a-wrong-way/</guid><pubDate>Thu, 26 Jan 2017 00:12:00 GMT</pubDate></item><item><title>I hate JPA and Hibernate</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-09-30-i-hate-jpa-and-hibernate/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-30-i-hate-jpa-and-hibernate/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>hibernate</category><category>java</category><category>jpa</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-09-30-i-hate-jpa-and-hibernate/</guid><pubDate>Fri, 30 Sep 2016 18:32:00 GMT</pubDate></item><item><title>Sequential Mockito verifications refactoring with fluent interfaces</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-09-23-sequential-mockito-verifications-refactoring-with-fluent-interfaces/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;This article was originally written in Russian and published on September 12, 2016 at &lt;a href="https://habrahabr.ru/post/309752/"&gt;Habrahabr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Static methods have one powerful and not very desirable feature: they can be invoked from any place of the code, and they also can't really dictate the order of such invocations.
Usually such control is really important, but sometimes the real order does not make much sense.
For example, assertions and verifications in unit tests often do not require to be executed in strict order.
To ensure that all verifications are done, &lt;a href="http://mockito.org/"&gt;Mockito&lt;/a&gt; provides a static method named &lt;code&gt;verifyNoMoreInteractions(...)&lt;/code&gt;.
Sometimes, accidentally, this method can be invoked before the last &lt;code&gt;verify(...)&lt;/code&gt; is invoked so a bitter "red" test will be the result.
But what if delegate the verification order check to the compiler?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-23-sequential-mockito-verifications-refactoring-with-fluent-interfaces/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>java-8</category><category>mockito</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-09-23-sequential-mockito-verifications-refactoring-with-fluent-interfaces/</guid><pubDate>Fri, 23 Sep 2016 15:41:00 GMT</pubDate></item><item><title>Making fun with Java and C preprocessor</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-09-06-fun-with-java-and-c-preprocessor/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;Sometimes, usually on Fridays, there is nothing to do.
And I always missed a very cool feature of meta-programming in Java.
Well, Java is not very excited about making changes in the core language, so we can make some fun with meta-programming ourselves.
Let's take a look at a Java and &lt;a href="https://gcc.gnu.org/onlinedocs/cpp/"&gt;C preprocessor&lt;/a&gt; example.
And remember, it's just for fun and nothing else. :)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-06-fun-with-java-and-c-preprocessor/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-09-06-fun-with-java-and-c-preprocessor/</guid><pubDate>Tue, 06 Sep 2016 07:30:00 GMT</pubDate></item><item><title>Ternary predicates authorization in Spring Security</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I posted &lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/%7B%%20post_url%202016-08-06-java-8-libraries-and-android-applications-using-maven%20%%7D"&gt;an article on Spring Security&lt;/a&gt; describing how to make &lt;code&gt;@PreAuthorize&lt;/code&gt; expressions custom types aware.
Today I'm going to share some my codebase for ternary authorization with three possible values: &lt;code&gt;GRANT&lt;/code&gt;, &lt;code&gt;ABSTAIN&lt;/code&gt;, and &lt;code&gt;DENY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>oop</category><category>spring-framework</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/</guid><pubDate>Thu, 01 Sep 2016 20:35:00 GMT</pubDate></item><item><title>A little StringBuilder drawback</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-08-30-a-little-stringbuilder-drawback/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;Can you spot a mistake in the code below?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sb2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-08-30-a-little-stringbuilder-drawback/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-08-30-a-little-stringbuilder-drawback/</guid><pubDate>Tue, 30 Aug 2016 14:30:00 GMT</pubDate></item><item><title>Spring Security @PreAuthorize annotation custom types and inspectable DSL support</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-08-07-spring-security-preauthorize-annotation-custom-types-and-inspectable-dsl-support/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;This article was originally written in Russian and published on August 11, 2016 at &lt;a href="https://habrahabr.ru/post/307558/"&gt;Habrahabr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Spring Security&lt;/a&gt; is a must-have component for Spring applications as it's responsible for user authentication and system activity authorization.
The use of &lt;code&gt;@PreAuthorize&lt;/code&gt; is one of Spring Security methods allowing to define some authorization rules easily, and these rules can grant or deny some operation for a particular user.&lt;/p&gt;
&lt;p&gt;The REST service I currently develop has to provide an endpoint to list all controller methods authorization rules.
And, if possible, avoid revealing the specifics of &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html"&gt;SpEL&lt;/a&gt; expressions (so, use something like &lt;code&gt;anybody&lt;/code&gt; instead of &lt;code&gt;permitAll&lt;/code&gt;; avoid &lt;code&gt;principal&lt;/code&gt; at all as an excessive expression), but return custom expressions we can process whatever we want.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-08-07-spring-security-preauthorize-annotation-custom-types-and-inspectable-dsl-support/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>spring-framework</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-08-07-spring-security-preauthorize-annotation-custom-types-and-inspectable-dsl-support/</guid><pubDate>Sat, 06 Aug 2016 21:00:00 GMT</pubDate></item><item><title>Java 8 libraries and Android applications using Maven</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-08-06-java-8-libraries-and-android-applications-using-maven/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;The original question was originally posted on May 17, 2015 at &lt;a href="http://stackoverflow.com/questions/30286371/maven-using-java-8-libraries-in-applications-instrumented-with-retrolambda-mave/32510895"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article was originally written in Russian and published on September 15, 2015 at &lt;a href="https://habrahabr.ru/post/266881/"&gt;Habrahabr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 8 was released in early 2014 featuring some pretty convenient new &lt;a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html"&gt;features&lt;/a&gt; to simplify trivial coding and letting the developers to simplify their lives.
Some of them are lambda expressions, method and constructor references, interface default methods as the Java language and JVM extensions, and the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html"&gt;Stream API&lt;/a&gt; for JDK.
Unfortunately, slow introduction of such new features has a pretty negative impact on another Java-oriented platforms.
GWT and Android still lack the Java 8 language features official support.
However, the last spring GWT 2.8.0 SNAPSHOT versions have lambda expressions support already.
Android things are still different since lambda expressions rely on the Android Java runtime, and not just the compiler.
But Maven 8 lets to solve the Java 8 use problem relatively easy.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-08-06-java-8-libraries-and-android-applications-using-maven/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>java</category><category>java-8</category><category>maven</category><category>retrolambda</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-08-06-java-8-libraries-and-android-applications-using-maven/</guid><pubDate>Sat, 06 Aug 2016 14:44:00 GMT</pubDate></item></channel></rss>