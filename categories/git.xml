<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lsh::blog (Posts about git)</title><link>https://lyubomyr-shaydariv.github.io/</link><description></description><atom:link href="https://lyubomyr-shaydariv.github.io/categories/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:"&gt;Lyubomyr Shaydariv&lt;/a&gt; </copyright><lastBuildDate>Mon, 19 Apr 2021 08:21:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Mercurial subrepositories to Git submodules</title><link>https://lyubomyr-shaydariv.github.io/posts/2019-02-06-hg-subrepos-to-git-submodules/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;I didn't start with Git.
Mercurial has become my first DVCS.
Because of that, Mercurial actually ate my first source code.
I'm a huge Git fan now, and I switched all my single-repo repositories to Git using &lt;a href="https://github.com/frej/fast-export"&gt;this awesome tool&lt;/a&gt;.
Now, long few years later, the tool has &lt;a href="https://github.com/frej/fast-export/issues/51"&gt;finally&lt;/a&gt; gotten the Mercurial subrepositories to Git submodules support, so now I'm able to migrate to Git completely.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2019-02-06-hg-subrepos-to-git-submodules/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>hg</category><guid>https://lyubomyr-shaydariv.github.io/posts/2019-02-06-hg-subrepos-to-git-submodules/</guid><pubDate>Wed, 06 Feb 2019 20:16:00 GMT</pubDate></item><item><title>Efficient git filter-branch and --index-filter implementation</title><link>https://lyubomyr-shaydariv.github.io/posts/2018-07-18-efficient-git-filter-branch-index-filter/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;About two years ago I posted a post that described how you can use Git and Mercurial to create encrypted repositories.
Back to then, I claimed that the encryption cannot be changed and the encryption method will be constant for the entire repository lifecycle.
Well, sort of, from the user's perspective (at least if you don't use versioned &lt;code&gt;.gitattributes&lt;/code&gt; that refer different crypto-filters).
Using and maintaining such repositories can be not a fun, and you might want to decrypt the whole repository some rainy day.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-filter-branch"&gt;&lt;code&gt;git filter-branch&lt;/code&gt;&lt;/a&gt; (a bit of a cryptic name, as well, yeah?) is a right tool.
It features a lot of filtering options that can transform the original repository from scratch, and we're going to use &lt;code&gt;--index-filter&lt;/code&gt;...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2018-07-18-efficient-git-filter-branch-index-filter/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><guid>https://lyubomyr-shaydariv.github.io/posts/2018-07-18-efficient-git-filter-branch-index-filter/</guid><pubDate>Wed, 18 Jul 2018 20:30:00 GMT</pubDate></item><item><title>Encrypted blobs in Git and Mercurial</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-11-22-encrypted-blobs-in-git-and-mercurial/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt; started their lives in the mid 2000 bringing the growing popularity &lt;a href="https://en.wikipedia.org/wiki/Distributed_version_control"&gt;DVCS&lt;/a&gt; concept to people.
Both of them use similar techniques to gain the same results and offer very similar features.
One of such features is bidirectional filtering applied to files once they get checked out and committed in (or staged to the index) from and to the repository respectively.
The filters can be used in many ways, like SVN-like keyword expansion or auto-formatting.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-11-22-encrypted-blobs-in-git-and-mercurial/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>mercurial</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-11-22-encrypted-blobs-in-git-and-mercurial/</guid><pubDate>Tue, 22 Nov 2016 20:30:00 GMT</pubDate></item></channel></rss>