<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lsh::blog (Posts about spring-framework)</title><link>https://lyubomyr-shaydariv.github.io/</link><description></description><atom:link href="https://lyubomyr-shaydariv.github.io/categories/spring-framework.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:"&gt;Lyubomyr Shaydariv&lt;/a&gt; </copyright><lastBuildDate>Mon, 19 Apr 2021 08:21:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Ternary predicates authorization in Spring Security</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I posted &lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/%7B%%20post_url%202016-08-06-java-8-libraries-and-android-applications-using-maven%20%%7D"&gt;an article on Spring Security&lt;/a&gt; describing how to make &lt;code&gt;@PreAuthorize&lt;/code&gt; expressions custom types aware.
Today I'm going to share some my codebase for ternary authorization with three possible values: &lt;code&gt;GRANT&lt;/code&gt;, &lt;code&gt;ABSTAIN&lt;/code&gt;, and &lt;code&gt;DENY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>oop</category><category>spring-framework</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-09-01-ternary-predicates-authorization-in-spring-security/</guid><pubDate>Thu, 01 Sep 2016 20:35:00 GMT</pubDate></item><item><title>Spring Security @PreAuthorize annotation custom types and inspectable DSL support</title><link>https://lyubomyr-shaydariv.github.io/posts/2016-08-07-spring-security-preauthorize-annotation-custom-types-and-inspectable-dsl-support/</link><dc:creator>Lyubomyr Shaydariv</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;This article was originally written in Russian and published on August 11, 2016 at &lt;a href="https://habrahabr.ru/post/307558/"&gt;Habrahabr&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Spring Security&lt;/a&gt; is a must-have component for Spring applications as it's responsible for user authentication and system activity authorization.
The use of &lt;code&gt;@PreAuthorize&lt;/code&gt; is one of Spring Security methods allowing to define some authorization rules easily, and these rules can grant or deny some operation for a particular user.&lt;/p&gt;
&lt;p&gt;The REST service I currently develop has to provide an endpoint to list all controller methods authorization rules.
And, if possible, avoid revealing the specifics of &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html"&gt;SpEL&lt;/a&gt; expressions (so, use something like &lt;code&gt;anybody&lt;/code&gt; instead of &lt;code&gt;permitAll&lt;/code&gt;; avoid &lt;code&gt;principal&lt;/code&gt; at all as an excessive expression), but return custom expressions we can process whatever we want.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lyubomyr-shaydariv.github.io/posts/2016-08-07-spring-security-preauthorize-annotation-custom-types-and-inspectable-dsl-support/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>spring-framework</category><guid>https://lyubomyr-shaydariv.github.io/posts/2016-08-07-spring-security-preauthorize-annotation-custom-types-and-inspectable-dsl-support/</guid><pubDate>Sat, 06 Aug 2016 21:00:00 GMT</pubDate></item></channel></rss>